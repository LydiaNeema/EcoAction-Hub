openapi: 3.0.0
info:
  title: EcoAction Hub API
  description: A comprehensive platform connecting communities to solve local climate challenges through AI-powered emergency response and community collaboration.
  version: 1.0.0
  contact:
    name: EcoAction Hub Team
    email: support@ecoactionhub.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://ecoaction-hub.onrender.com/api
    description: Production server
  - url: http://localhost:5000/api
    description: Development server

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  description: Username
                  example: eco_user
                email:
                  type: string
                  format: email
                  description: Email address
                  example: user@example.com
                password:
                  type: string
                  description: Password
                  example: securePassword123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: Username
                  example: eco_user
                password:
                  type: string
                  description: Password
                  example: securePassword123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  access_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user information
      description: Retrieve information about the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /community/actions:
    get:
      tags:
        - Community Actions
      summary: List all community actions
      description: Retrieve a list of all community actions
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, completed, cancelled]
          description: Filter by action status
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/CommunityAction'

    post:
      tags:
        - Community Actions
      summary: Create a new community action
      description: Create a new community action
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAction'
      responses:
        '201':
          description: Action created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  action:
                    $ref: '#/components/schemas/CommunityAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /community/actions/{action_id}:
    put:
      tags:
        - Community Actions
      summary: Update an existing action
      description: Update an existing community action (creator only)
      security:
        - bearerAuth: []
      parameters:
        - name: action_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAction'
      responses:
        '200':
          description: Action updated successfully
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Community Actions
      summary: Delete an action
      description: Delete a community action (creator only)
      security:
        - bearerAuth: []
      parameters:
        - name: action_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Action deleted successfully
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /community/actions/{action_id}/join:
    post:
      tags:
        - Community Actions
      summary: Join a community action
      description: Join a community action
      security:
        - bearerAuth: []
      parameters:
        - name: action_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                participation_image:
                  type: string
                  description: Image URL uploaded when joining
                notes:
                  type: string
                  description: Optional notes when joining
      responses:
        '201':
          description: Joined action successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /community/actions/{action_id}/leave:
    post:
      tags:
        - Community Actions
      summary: Leave a community action
      description: Leave a community action
      security:
        - bearerAuth: []
      parameters:
        - name: action_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Left action successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /community/my-actions:
    get:
      tags:
        - Community Actions
      summary: Get actions joined by current user
      description: Retrieve actions joined by the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/CommunityAction'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /community/stats:
    get:
      tags:
        - Community Actions
      summary: Get community statistics
      description: Retrieve community statistics
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  stats:
                    type: object
                    properties:
                      total_actions:
                        type: integer
                      total_participants:
                        type: integer
                      active_actions:
                        type: integer

  /emergency/alerts:
    get:
      tags:
        - Emergency Management
      summary: List all emergency alerts
      description: Retrieve a list of all emergency alerts
      parameters:
        - name: severity
          in: query
          schema:
            type: string
            enum: [low, medium, high, critical]
          description: Filter by severity level
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  alerts:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmergencyAlert'

  /emergency/reports:
    get:
      tags:
        - Emergency Management
      summary: List all emergency reports
      description: Retrieve a list of all emergency reports
      responses:
        '200':
          description: Success

    post:
      tags:
        - Emergency Management
      summary: Submit an emergency report
      description: Submit a new emergency report
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmergencyReport'
      responses:
        '201':
          description: Report created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /emergency/contacts:
    get:
      tags:
        - Emergency Management
      summary: Get emergency contacts
      description: Retrieve emergency contact information
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  contacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmergencyContact'

  /emergency/insights:
    get:
      tags:
        - Emergency Management
      summary: Get AI-powered emergency insights
      description: Retrieve AI-generated insights about emergency patterns
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  insights:
                    type: object
                    properties:
                      alert_trend:
                        type: string
                      recommendations:
                        type: array
                        items:
                          type: string

  /upload/image:
    post:
      tags:
        - File Upload
      summary: Upload an image file
      description: Upload and process an image file
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload
      responses:
        '201':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'

  /upload/images/{filename}:
    get:
      tags:
        - File Upload
      summary: Serve an uploaded image
      description: Serve an uploaded image file
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Image served successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - File Upload
      summary: Delete an uploaded image
      description: Delete an uploaded image file (owner only)
      security:
        - bearerAuth: []
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Image deleted successfully
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /profile/:
    get:
      tags:
        - User Profile
      summary: Get user profile
      description: Retrieve user profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  profile:
                    $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - User Profile
      summary: Update user profile
      description: Update user profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
      responses:
        '200':
          description: Profile updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 1
        username:
          type: string
          description: Username
          example: eco_user
        email:
          type: string
          format: email
          description: Email address
          example: user@example.com
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"

    CommunityAction:
      type: object
      properties:
        id:
          type: integer
          description: Action ID
          example: 1
        title:
          type: string
          description: Action title
          example: "Beach Cleanup Initiative"
        description:
          type: string
          description: Action description
          example: "Join us for a community beach cleanup to protect marine life"
        category:
          type: string
          description: Action category
          example: "Environment"
        location:
          type: string
          description: Action location
          example: "Nairobi Beach"
        date:
          type: string
          format: date-time
          description: Action date
          example: "2024-02-15T09:00:00Z"
        image:
          type: string
          description: Action image URL
          example: "https://example.com/image.jpg"
        impact_metric:
          type: integer
          description: Impact metric
          example: 100
        status:
          type: string
          description: Action status
          example: "active"
        created_by:
          type: integer
          description: Creator user ID
          example: 1
        participants_count:
          type: integer
          description: Number of participants
          example: 25
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"

    CreateAction:
      type: object
      required:
        - title
        - description
        - category
        - location
        - date
      properties:
        title:
          type: string
          description: Action title
          example: "Beach Cleanup Initiative"
        description:
          type: string
          description: Action description
          example: "Join us for a community beach cleanup to protect marine life"
        category:
          type: string
          description: Action category
          example: "Environment"
        location:
          type: string
          description: Action location
          example: "Nairobi Beach"
        date:
          type: string
          format: date-time
          description: Action date (ISO format)
          example: "2024-02-15T09:00:00Z"
        image:
          type: string
          description: Action image URL
          example: "https://example.com/image.jpg"
        impact_metric:
          type: integer
          description: Impact metric
          example: 100
        status:
          type: string
          description: Action status
          example: "active"

    UpdateAction:
      type: object
      properties:
        title:
          type: string
          description: Action title
        description:
          type: string
          description: Action description
        category:
          type: string
          description: Action category
        location:
          type: string
          description: Action location
        date:
          type: string
          format: date-time
          description: Action date
        image:
          type: string
          description: Action image URL
        impact_metric:
          type: integer
          description: Impact metric
        status:
          type: string
          description: Action status

    EmergencyAlert:
      type: object
      properties:
        id:
          type: integer
          description: Alert ID
          example: 1
        title:
          type: string
          description: Alert title
          example: "Flash Flood Warning"
        description:
          type: string
          description: Alert description
          example: "Heavy rainfall expected in Nairobi area"
        type:
          type: string
          description: Alert type
          example: "flood"
        severity:
          type: string
          description: Alert severity
          example: "high"
        location:
          type: string
          description: Alert location
          example: "Nairobi County"
        date:
          type: string
          format: date-time
          description: Alert date
          example: "2024-01-15T14:30:00Z"
        status:
          type: string
          description: Alert status
          example: "active"

    EmergencyReport:
      type: object
      required:
        - alert_type
        - description
        - location
        - severity
      properties:
        alert_type:
          type: string
          description: Type of emergency
          example: "flood"
        description:
          type: string
          description: Emergency description
          example: "Street flooding near downtown area"
        location:
          type: string
          description: Emergency location
          example: "Nairobi Downtown"
        severity:
          type: string
          description: Emergency severity
          example: "medium"
        contact_info:
          type: string
          description: Contact information
          example: "John Doe - +254712345678"
        image_url:
          type: string
          description: Image URL of emergency
          example: "https://example.com/emergency.jpg"

    EmergencyContact:
      type: object
      properties:
        id:
          type: integer
          description: Contact ID
          example: 1
        name:
          type: string
          description: Service name
          example: "Nairobi Emergency Services"
        phone:
          type: string
          description: Contact phone number
          example: "+254712345678"
        email:
          type: string
          description: Contact email
          example: "emergency@nairobi.go.ke"
        service_type:
          type: string
          description: Type of service
          example: "Emergency Response"
        location:
          type: string
          description: Service location
          example: "Nairobi County"

    UploadResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Upload success status
          example: true
        message:
          type: string
          description: Upload message
          example: "Image uploaded successfully"
        image_url:
          type: string
          description: Uploaded image URL
          example: "/uploads/images/abc123.jpg"
        filename:
          type: string
          description: Generated filename
          example: "abc123.jpg"

    Profile:
      type: object
      properties:
        id:
          type: integer
          description: Profile ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        bio:
          type: string
          description: User bio
          example: "Environmental activist passionate about community action"
        location:
          type: string
          description: User location
          example: "Nairobi, Kenya"
        issues_reported:
          type: integer
          description: Number of issues reported
          example: 5
        alerts_responded:
          type: integer
          description: Number of alerts responded
          example: 12
        community_impact:
          type: integer
          description: Community impact score
          example: 150
        trees_planted:
          type: integer
          description: Number of trees planted
          example: 25
        issues_this_month:
          type: integer
          description: Issues reported this month
          example: 2
        alerts_this_month:
          type: integer
          description: Alerts responded this month
          example: 3
        impact_this_month:
          type: integer
          description: Impact this month
          example: 45
        trees_this_month:
          type: integer
          description: Trees planted this month
          example: 5

    UpdateProfile:
      type: object
      properties:
        bio:
          type: string
          description: User bio
        location:
          type: string
          description: User location

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
          example: "Validation error"
        details:
          type: object
          description: Additional error details

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    PayloadTooLarge:
      description: File too large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authentication token

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Community Actions
    description: Community action management
  - name: Emergency Management
    description: Emergency alerts and reporting
  - name: File Upload
    description: File upload operations
  - name: User Profile
    description: User profile management
